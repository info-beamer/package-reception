#!/usr/bin/python2.7
import time
import sys
import pytz
from datetime import datetime, timedelta
from calendar import timegm
from hosted import config, node

config.restart_on_update()

timezone = config.timezone
if timezone == "Device timezone":
    timezone = config.metadata['timezone']
print >>sys.stderr, "Using timezone %s" % (timezone,)

tz = pytz.timezone(timezone)

def current_time():
    now = datetime.utcnow()
    timestamp = timegm(now.timetuple()) + now.microsecond / 1000000.
    return now, timestamp

def send_clock(now, ts):
    now = now.replace(tzinfo=pytz.utc)
    now = now.astimezone(tz)
    now = now.replace(tzinfo=None)

    since_midnight = (
        now -
        now.replace(hour=0, minute=0, second=0, microsecond=0)
    )
    since_midnight = since_midnight.seconds + since_midnight.microseconds / 1000000.

    monday = (now - timedelta(days = now.weekday())).replace(hour=0, minute=0, second=0, microsecond=0)
    since_monday = now - monday
    since_monday = since_monday.days * 86400 + since_monday.seconds + since_monday.microseconds / 1000000.

    node.send('/clock/since_midnight:%f' % since_midnight)
    node.send('/clock/since_monday:%f' % since_monday)

    time_fmt = config.time_fmt
    if not time_fmt:
        return

    # The following might seem odd, but it allows makes the
    # new package version compatible with previous config
    # settings.
    if time_fmt.startswith('%a'):
        day_of_week = {
            'nl': ['Ma', 'Di', 'Wo', 'Do', 'Vr', 'Za', 'Zo'],
            'en': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
            'es': ['Lun', 'Mar', 'Mie', 'Jue', 'Vie', 'Sab', 'Dom'],
            'de': ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'],
        }[config.language][now.weekday()]
        time_fmt = day_of_week + time_fmt[2:]

    human_time = now.strftime(time_fmt)
    node.send('/clock/human:%s' % human_time)

def main():
    while 1:
        now, ts = current_time()
        if now.year < 2000:
            print >>sys.stderr, "too soon"
            time.sleep(1)
            continue

        send_clock(now, ts)
        time.sleep(0.5)

if __name__ == "__main__":
    main()
